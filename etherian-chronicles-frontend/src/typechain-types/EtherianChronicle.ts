/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace EtherianChronicle {
  export type ChoiceStruct = {
    text: string;
    voteCount: BigNumberish;
    nextChapterIndex: BigNumberish;
  };

  export type ChoiceStructOutput = [
    text: string,
    voteCount: bigint,
    nextChapterIndex: bigint
  ] & { text: string; voteCount: bigint; nextChapterIndex: bigint };

  export type LoreFragmentDataStruct = {
    storyId: BigNumberish;
    chapterId: BigNumberish;
    choiceIndex: BigNumberish;
    mintTimestamp: BigNumberish;
    userPointsAtMint: BigNumberish;
    rarity: BigNumberish;
  };

  export type LoreFragmentDataStructOutput = [
    storyId: bigint,
    chapterId: bigint,
    choiceIndex: bigint,
    mintTimestamp: bigint,
    userPointsAtMint: bigint,
    rarity: bigint
  ] & {
    storyId: bigint;
    chapterId: bigint;
    choiceIndex: bigint;
    mintTimestamp: bigint;
    userPointsAtMint: bigint;
    rarity: bigint;
  };

  export type LeaderboardEntryStruct = {
    user: AddressLike;
    points: BigNumberish;
    winningVotes: BigNumberish;
    storiesParticipated: BigNumberish;
    referralCount: BigNumberish;
  };

  export type LeaderboardEntryStructOutput = [
    user: string,
    points: bigint,
    winningVotes: bigint,
    storiesParticipated: bigint,
    referralCount: bigint
  ] & {
    user: string;
    points: bigint;
    winningVotes: bigint;
    storiesParticipated: bigint;
    referralCount: bigint;
  };

  export type UserProfileStruct = {
    totalPoints: BigNumberish;
    storiesParticipated: BigNumberish;
    winningVotes: BigNumberish;
    referrer: AddressLike;
    referralCount: BigNumberish;
    isRegistered: boolean;
    registeredAt: BigNumberish;
  };

  export type UserProfileStructOutput = [
    totalPoints: bigint,
    storiesParticipated: bigint,
    winningVotes: bigint,
    referrer: string,
    referralCount: bigint,
    isRegistered: boolean,
    registeredAt: bigint
  ] & {
    totalPoints: bigint;
    storiesParticipated: bigint;
    winningVotes: bigint;
    referrer: string;
    referralCount: bigint;
    isRegistered: boolean;
    registeredAt: bigint;
  };
}

export interface EtherianChronicleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CHAPTER_VOTING_PERIOD"
      | "EARLY_VOTE_PERIOD"
      | "POINTS_EARLY_VOTE"
      | "POINTS_REFERRAL"
      | "POINTS_STORY_COMPLETION"
      | "POINTS_WINNING_VOTE"
      | "PROPOSAL_VOTING_PERIOD"
      | "addChapter"
      | "addCollaborator"
      | "approve"
      | "balanceOf"
      | "canClaimCompletionBonus"
      | "canClaimFragment"
      | "checkIsCollaborator"
      | "claimStoryCompletionBonus"
      | "claimWinnerFragment"
      | "createStoryProposal"
      | "earlyVoters"
      | "endStory"
      | "generateTokenURI"
      | "getApproved"
      | "getChapter"
      | "getChapterChoices"
      | "getCurrentChapterIndex"
      | "getFragmentData"
      | "getLeaderboard"
      | "getProposalInfo"
      | "getProposalVoteCounts"
      | "getStoryCollaborators"
      | "getStoryDetails"
      | "getStoryStatus"
      | "getTotalChapters"
      | "getTotalStories"
      | "getUserFragments"
      | "getUserProfile"
      | "getUserProposalVote"
      | "getUserRarityTier"
      | "getVotingPeriods"
      | "hasClaimedCompletionBonus"
      | "hasClaimedFragment"
      | "hasVotedOnChapter"
      | "hasVotedOnProposal"
      | "isApprovedForAll"
      | "isChapterVotingActive"
      | "leaderboard"
      | "leaderboardCount"
      | "loreFragmentData"
      | "mintLoreFragment"
      | "name"
      | "owner"
      | "ownerOf"
      | "pauseStory"
      | "registerUser"
      | "renounceOwnership"
      | "resolveChapter"
      | "resolveProposal"
      | "resumeStory"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "stories"
      | "storyCompletionBonusAvailable"
      | "storyIdToCurrentChapterIndex"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
      | "transferOwnership"
      | "userOwnedFragments"
      | "userProfiles"
      | "userVoteChoices"
      | "voteOnChapter"
      | "voteOnProposal"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "BatchMetadataUpdate"
      | "ChapterAdded"
      | "ChapterResolved"
      | "CollaboratorAdded"
      | "LeaderboardUpdated"
      | "LoreFragmentMinted"
      | "MetadataUpdate"
      | "OwnershipTransferred"
      | "PointsAwarded"
      | "ProposalVoteCast"
      | "StoryApproved"
      | "StoryCompleted"
      | "StoryCompletionBonusAwarded"
      | "StoryProposed"
      | "StoryRejected"
      | "Transfer"
      | "UserRegistered"
      | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CHAPTER_VOTING_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EARLY_VOTE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POINTS_EARLY_VOTE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POINTS_REFERRAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POINTS_STORY_COMPLETION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POINTS_WINNING_VOTE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROPOSAL_VOTING_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addChapter",
    values: [BigNumberish, BigNumberish, BigNumberish, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addCollaborator",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canClaimCompletionBonus",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canClaimFragment",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIsCollaborator",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimStoryCompletionBonus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWinnerFragment",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createStoryProposal",
    values: [string, string, string, string, string[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "earlyVoters",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "endStory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateTokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChapter",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChapterChoices",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentChapterIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFragmentData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLeaderboard",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalVoteCounts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStoryCollaborators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStoryDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStoryStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalChapters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStories",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserFragments",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserProfile",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserProposalVote",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRarityTier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingPeriods",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimedCompletionBonus",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimedFragment",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVotedOnChapter",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVotedOnProposal",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isChapterVotingActive",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "leaderboard",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "leaderboardCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "loreFragmentData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintLoreFragment",
    values: [AddressLike, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseStory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveChapter",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resumeStory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stories",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storyCompletionBonusAvailable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storyIdToCurrentChapterIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userOwnedFragments",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userProfiles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userVoteChoices",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "voteOnChapter",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteOnProposal",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CHAPTER_VOTING_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EARLY_VOTE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POINTS_EARLY_VOTE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POINTS_REFERRAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POINTS_STORY_COMPLETION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POINTS_WINNING_VOTE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROPOSAL_VOTING_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addChapter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addCollaborator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canClaimCompletionBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canClaimFragment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIsCollaborator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimStoryCompletionBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimWinnerFragment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStoryProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earlyVoters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endStory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChapter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChapterChoices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentChapterIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFragmentData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalVoteCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStoryCollaborators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStoryDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStoryStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalChapters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserFragments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserProposalVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRarityTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingPeriods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasClaimedCompletionBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasClaimedFragment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasVotedOnChapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasVotedOnProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isChapterVotingActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leaderboardCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loreFragmentData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintLoreFragment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauseStory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveChapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resumeStory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stories", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storyCompletionBonusAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storyIdToCurrentChapterIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userOwnedFragments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userProfiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userVoteChoices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteOnChapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteOnProposal",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchMetadataUpdateEvent {
  export type InputTuple = [
    _fromTokenId: BigNumberish,
    _toTokenId: BigNumberish
  ];
  export type OutputTuple = [_fromTokenId: bigint, _toTokenId: bigint];
  export interface OutputObject {
    _fromTokenId: bigint;
    _toTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChapterAddedEvent {
  export type InputTuple = [
    storyId: BigNumberish,
    chapterId: BigNumberish,
    ipfsHash: string,
    voteEndTime: BigNumberish
  ];
  export type OutputTuple = [
    storyId: bigint,
    chapterId: bigint,
    ipfsHash: string,
    voteEndTime: bigint
  ];
  export interface OutputObject {
    storyId: bigint;
    chapterId: bigint;
    ipfsHash: string;
    voteEndTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChapterResolvedEvent {
  export type InputTuple = [
    storyId: BigNumberish,
    chapterId: BigNumberish,
    winningChoiceIndex: BigNumberish,
    winningChoiceText: string
  ];
  export type OutputTuple = [
    storyId: bigint,
    chapterId: bigint,
    winningChoiceIndex: bigint,
    winningChoiceText: string
  ];
  export interface OutputObject {
    storyId: bigint;
    chapterId: bigint;
    winningChoiceIndex: bigint;
    winningChoiceText: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollaboratorAddedEvent {
  export type InputTuple = [storyId: BigNumberish, collaborator: AddressLike];
  export type OutputTuple = [storyId: bigint, collaborator: string];
  export interface OutputObject {
    storyId: bigint;
    collaborator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LeaderboardUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    position: BigNumberish,
    points: BigNumberish
  ];
  export type OutputTuple = [user: string, position: bigint, points: bigint];
  export interface OutputObject {
    user: string;
    position: bigint;
    points: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoreFragmentMintedEvent {
  export type InputTuple = [
    recipient: AddressLike,
    storyId: BigNumberish,
    chapterId: BigNumberish,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    recipient: string,
    storyId: bigint,
    chapterId: bigint,
    tokenId: bigint
  ];
  export interface OutputObject {
    recipient: string;
    storyId: bigint;
    chapterId: bigint;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdateEvent {
  export type InputTuple = [_tokenId: BigNumberish];
  export type OutputTuple = [_tokenId: bigint];
  export interface OutputObject {
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PointsAwardedEvent {
  export type InputTuple = [
    user: AddressLike,
    points: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [user: string, points: bigint, reason: string];
  export interface OutputObject {
    user: string;
    points: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalVoteCastEvent {
  export type InputTuple = [
    storyId: BigNumberish,
    voter: AddressLike,
    voteType: BigNumberish
  ];
  export type OutputTuple = [storyId: bigint, voter: string, voteType: bigint];
  export interface OutputObject {
    storyId: bigint;
    voter: string;
    voteType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StoryApprovedEvent {
  export type InputTuple = [storyId: BigNumberish];
  export type OutputTuple = [storyId: bigint];
  export interface OutputObject {
    storyId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StoryCompletedEvent {
  export type InputTuple = [
    storyId: BigNumberish,
    totalChapters: BigNumberish,
    totalParticipants: BigNumberish
  ];
  export type OutputTuple = [
    storyId: bigint,
    totalChapters: bigint,
    totalParticipants: bigint
  ];
  export interface OutputObject {
    storyId: bigint;
    totalChapters: bigint;
    totalParticipants: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StoryCompletionBonusAwardedEvent {
  export type InputTuple = [
    user: AddressLike,
    storyId: BigNumberish,
    bonusPoints: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    storyId: bigint,
    bonusPoints: bigint
  ];
  export interface OutputObject {
    user: string;
    storyId: bigint;
    bonusPoints: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StoryProposedEvent {
  export type InputTuple = [
    storyId: BigNumberish,
    writer: AddressLike,
    title: string,
    summary: string,
    ipfsHashImage: string
  ];
  export type OutputTuple = [
    storyId: bigint,
    writer: string,
    title: string,
    summary: string,
    ipfsHashImage: string
  ];
  export interface OutputObject {
    storyId: bigint;
    writer: string;
    title: string;
    summary: string;
    ipfsHashImage: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StoryRejectedEvent {
  export type InputTuple = [storyId: BigNumberish];
  export type OutputTuple = [storyId: bigint];
  export interface OutputObject {
    storyId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserRegisteredEvent {
  export type InputTuple = [user: AddressLike, referrer: AddressLike];
  export type OutputTuple = [user: string, referrer: string];
  export interface OutputObject {
    user: string;
    referrer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    storyId: BigNumberish,
    chapterId: BigNumberish,
    voter: AddressLike,
    choiceIndex: BigNumberish
  ];
  export type OutputTuple = [
    storyId: bigint,
    chapterId: bigint,
    voter: string,
    choiceIndex: bigint
  ];
  export interface OutputObject {
    storyId: bigint;
    chapterId: bigint;
    voter: string;
    choiceIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EtherianChronicle extends BaseContract {
  connect(runner?: ContractRunner | null): EtherianChronicle;
  waitForDeployment(): Promise<this>;

  interface: EtherianChronicleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CHAPTER_VOTING_PERIOD: TypedContractMethod<[], [bigint], "view">;

  EARLY_VOTE_PERIOD: TypedContractMethod<[], [bigint], "view">;

  POINTS_EARLY_VOTE: TypedContractMethod<[], [bigint], "view">;

  POINTS_REFERRAL: TypedContractMethod<[], [bigint], "view">;

  POINTS_STORY_COMPLETION: TypedContractMethod<[], [bigint], "view">;

  POINTS_WINNING_VOTE: TypedContractMethod<[], [bigint], "view">;

  PROPOSAL_VOTING_PERIOD: TypedContractMethod<[], [bigint], "view">;

  addChapter: TypedContractMethod<
    [
      _storyId: BigNumberish,
      _previousChapterIndex: BigNumberish,
      _previousChapterWinningChoiceIndex: BigNumberish,
      _ipfsHash: string,
      _choices: string[]
    ],
    [void],
    "nonpayable"
  >;

  addCollaborator: TypedContractMethod<
    [_storyId: BigNumberish, _collaboratorAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  canClaimCompletionBonus: TypedContractMethod<
    [_storyId: BigNumberish, _user: AddressLike],
    [boolean],
    "view"
  >;

  canClaimFragment: TypedContractMethod<
    [_storyId: BigNumberish, _chapterIndex: BigNumberish, _user: AddressLike],
    [boolean],
    "view"
  >;

  checkIsCollaborator: TypedContractMethod<
    [_storyId: BigNumberish, _addr: AddressLike],
    [boolean],
    "view"
  >;

  claimStoryCompletionBonus: TypedContractMethod<
    [_storyId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimWinnerFragment: TypedContractMethod<
    [_storyId: BigNumberish, _chapterIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  createStoryProposal: TypedContractMethod<
    [
      _title: string,
      _summary: string,
      _ipfsHashImage: string,
      _ipfsHashChapter1Content: string,
      _chapter1Choices: string[],
      _collaborators: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  earlyVoters: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: AddressLike],
    [boolean],
    "view"
  >;

  endStory: TypedContractMethod<[_storyId: BigNumberish], [void], "nonpayable">;

  generateTokenURI: TypedContractMethod<
    [_tokenId: BigNumberish],
    [string],
    "view"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getChapter: TypedContractMethod<
    [_storyId: BigNumberish, _chapterIndex: BigNumberish],
    [
      [
        bigint,
        string,
        EtherianChronicle.ChoiceStructOutput[],
        bigint,
        bigint,
        bigint,
        boolean,
        bigint
      ] & {
        chapterId: bigint;
        ipfsHash: string;
        choices: EtherianChronicle.ChoiceStructOutput[];
        createdAt: bigint;
        voteEndTime: bigint;
        winningChoiceIndex: bigint;
        isResolved: boolean;
        voteCountSum: bigint;
      }
    ],
    "view"
  >;

  getChapterChoices: TypedContractMethod<
    [_storyId: BigNumberish, _chapterIndex: BigNumberish],
    [EtherianChronicle.ChoiceStructOutput[]],
    "view"
  >;

  getCurrentChapterIndex: TypedContractMethod<
    [_storyId: BigNumberish],
    [bigint],
    "view"
  >;

  getFragmentData: TypedContractMethod<
    [_tokenId: BigNumberish],
    [EtherianChronicle.LoreFragmentDataStructOutput],
    "view"
  >;

  getLeaderboard: TypedContractMethod<
    [_start: BigNumberish, _count: BigNumberish],
    [EtherianChronicle.LeaderboardEntryStructOutput[]],
    "view"
  >;

  getProposalInfo: TypedContractMethod<
    [_storyId: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        proposalVoteEndTime: bigint;
        proposalYesVotes: bigint;
        proposalNoVotes: bigint;
        isVotingActive: boolean;
      }
    ],
    "view"
  >;

  getProposalVoteCounts: TypedContractMethod<
    [_storyId: BigNumberish],
    [[bigint, bigint] & { yesVotes: bigint; noVotes: bigint }],
    "view"
  >;

  getStoryCollaborators: TypedContractMethod<
    [_storyId: BigNumberish],
    [string[]],
    "view"
  >;

  getStoryDetails: TypedContractMethod<
    [_storyId: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string[],
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        storyId: bigint;
        writer: string;
        title: string;
        summary: string;
        ipfsHashImage: string;
        collaborators: string[];
        status: bigint;
        createdAt: bigint;
        proposalVoteEndTime: bigint;
        proposalYesVotes: bigint;
        proposalNoVotes: bigint;
        currentChapterIndex: bigint;
        totalChapters: bigint;
      }
    ],
    "view"
  >;

  getStoryStatus: TypedContractMethod<
    [_storyId: BigNumberish],
    [bigint],
    "view"
  >;

  getTotalChapters: TypedContractMethod<
    [_storyId: BigNumberish],
    [bigint],
    "view"
  >;

  getTotalStories: TypedContractMethod<[], [bigint], "view">;

  getUserFragments: TypedContractMethod<
    [_user: AddressLike],
    [bigint[]],
    "view"
  >;

  getUserProfile: TypedContractMethod<
    [_user: AddressLike],
    [EtherianChronicle.UserProfileStructOutput],
    "view"
  >;

  getUserProposalVote: TypedContractMethod<
    [_storyId: BigNumberish, _voter: AddressLike],
    [bigint],
    "view"
  >;

  getUserRarityTier: TypedContractMethod<
    [_user: AddressLike],
    [bigint],
    "view"
  >;

  getVotingPeriods: TypedContractMethod<
    [],
    [[bigint, bigint] & { proposalPeriod: bigint; chapterPeriod: bigint }],
    "view"
  >;

  hasClaimedCompletionBonus: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  hasClaimedFragment: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: AddressLike],
    [boolean],
    "view"
  >;

  hasVotedOnChapter: TypedContractMethod<
    [_storyId: BigNumberish, _chapterIndex: BigNumberish, _voter: AddressLike],
    [boolean],
    "view"
  >;

  hasVotedOnProposal: TypedContractMethod<
    [_storyId: BigNumberish, _voter: AddressLike],
    [boolean],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isChapterVotingActive: TypedContractMethod<
    [_storyId: BigNumberish, _chapterIndex: BigNumberish],
    [boolean],
    "view"
  >;

  leaderboard: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint] & {
        user: string;
        points: bigint;
        winningVotes: bigint;
        storiesParticipated: bigint;
        referralCount: bigint;
      }
    ],
    "view"
  >;

  leaderboardCount: TypedContractMethod<[], [bigint], "view">;

  loreFragmentData: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        storyId: bigint;
        chapterId: bigint;
        choiceIndex: bigint;
        mintTimestamp: bigint;
        userPointsAtMint: bigint;
        rarity: bigint;
      }
    ],
    "view"
  >;

  mintLoreFragment: TypedContractMethod<
    [
      _recipient: AddressLike,
      _storyId: BigNumberish,
      _chapterId: BigNumberish,
      _tokenURI: string
    ],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  pauseStory: TypedContractMethod<
    [_storyId: BigNumberish],
    [void],
    "nonpayable"
  >;

  registerUser: TypedContractMethod<
    [_referrer: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resolveChapter: TypedContractMethod<
    [_storyId: BigNumberish, _chapterIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  resolveProposal: TypedContractMethod<
    [_storyId: BigNumberish],
    [void],
    "nonpayable"
  >;

  resumeStory: TypedContractMethod<
    [_storyId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  stories: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        storyId: bigint;
        writer: string;
        title: string;
        summary: string;
        ipfsHashImage: string;
        status: bigint;
        createdAt: bigint;
        proposalVoteEndTime: bigint;
        proposalYesVotes: bigint;
        proposalNoVotes: bigint;
        currentChapterIndex: bigint;
      }
    ],
    "view"
  >;

  storyCompletionBonusAvailable: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  storyIdToCurrentChapterIndex: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userOwnedFragments: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  userProfiles: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, string, bigint, boolean, bigint] & {
        totalPoints: bigint;
        storiesParticipated: bigint;
        winningVotes: bigint;
        referrer: string;
        referralCount: bigint;
        isRegistered: boolean;
        registeredAt: bigint;
      }
    ],
    "view"
  >;

  userVoteChoices: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: AddressLike],
    [bigint],
    "view"
  >;

  voteOnChapter: TypedContractMethod<
    [
      _storyId: BigNumberish,
      _chapterIndex: BigNumberish,
      _choiceIndex: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  voteOnProposal: TypedContractMethod<
    [_storyId: BigNumberish, _voteType: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CHAPTER_VOTING_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "EARLY_VOTE_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "POINTS_EARLY_VOTE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "POINTS_REFERRAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "POINTS_STORY_COMPLETION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "POINTS_WINNING_VOTE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PROPOSAL_VOTING_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addChapter"
  ): TypedContractMethod<
    [
      _storyId: BigNumberish,
      _previousChapterIndex: BigNumberish,
      _previousChapterWinningChoiceIndex: BigNumberish,
      _ipfsHash: string,
      _choices: string[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addCollaborator"
  ): TypedContractMethod<
    [_storyId: BigNumberish, _collaboratorAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "canClaimCompletionBonus"
  ): TypedContractMethod<
    [_storyId: BigNumberish, _user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "canClaimFragment"
  ): TypedContractMethod<
    [_storyId: BigNumberish, _chapterIndex: BigNumberish, _user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkIsCollaborator"
  ): TypedContractMethod<
    [_storyId: BigNumberish, _addr: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimStoryCompletionBonus"
  ): TypedContractMethod<[_storyId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimWinnerFragment"
  ): TypedContractMethod<
    [_storyId: BigNumberish, _chapterIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createStoryProposal"
  ): TypedContractMethod<
    [
      _title: string,
      _summary: string,
      _ipfsHashImage: string,
      _ipfsHashChapter1Content: string,
      _chapter1Choices: string[],
      _collaborators: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "earlyVoters"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "endStory"
  ): TypedContractMethod<[_storyId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "generateTokenURI"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getChapter"
  ): TypedContractMethod<
    [_storyId: BigNumberish, _chapterIndex: BigNumberish],
    [
      [
        bigint,
        string,
        EtherianChronicle.ChoiceStructOutput[],
        bigint,
        bigint,
        bigint,
        boolean,
        bigint
      ] & {
        chapterId: bigint;
        ipfsHash: string;
        choices: EtherianChronicle.ChoiceStructOutput[];
        createdAt: bigint;
        voteEndTime: bigint;
        winningChoiceIndex: bigint;
        isResolved: boolean;
        voteCountSum: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getChapterChoices"
  ): TypedContractMethod<
    [_storyId: BigNumberish, _chapterIndex: BigNumberish],
    [EtherianChronicle.ChoiceStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentChapterIndex"
  ): TypedContractMethod<[_storyId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFragmentData"
  ): TypedContractMethod<
    [_tokenId: BigNumberish],
    [EtherianChronicle.LoreFragmentDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLeaderboard"
  ): TypedContractMethod<
    [_start: BigNumberish, _count: BigNumberish],
    [EtherianChronicle.LeaderboardEntryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProposalInfo"
  ): TypedContractMethod<
    [_storyId: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        proposalVoteEndTime: bigint;
        proposalYesVotes: bigint;
        proposalNoVotes: bigint;
        isVotingActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProposalVoteCounts"
  ): TypedContractMethod<
    [_storyId: BigNumberish],
    [[bigint, bigint] & { yesVotes: bigint; noVotes: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStoryCollaborators"
  ): TypedContractMethod<[_storyId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getStoryDetails"
  ): TypedContractMethod<
    [_storyId: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string[],
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        storyId: bigint;
        writer: string;
        title: string;
        summary: string;
        ipfsHashImage: string;
        collaborators: string[];
        status: bigint;
        createdAt: bigint;
        proposalVoteEndTime: bigint;
        proposalYesVotes: bigint;
        proposalNoVotes: bigint;
        currentChapterIndex: bigint;
        totalChapters: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStoryStatus"
  ): TypedContractMethod<[_storyId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalChapters"
  ): TypedContractMethod<[_storyId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalStories"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserFragments"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserProfile"
  ): TypedContractMethod<
    [_user: AddressLike],
    [EtherianChronicle.UserProfileStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserProposalVote"
  ): TypedContractMethod<
    [_storyId: BigNumberish, _voter: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserRarityTier"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVotingPeriods"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { proposalPeriod: bigint; chapterPeriod: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasClaimedCompletionBonus"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasClaimedFragment"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasVotedOnChapter"
  ): TypedContractMethod<
    [_storyId: BigNumberish, _chapterIndex: BigNumberish, _voter: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasVotedOnProposal"
  ): TypedContractMethod<
    [_storyId: BigNumberish, _voter: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isChapterVotingActive"
  ): TypedContractMethod<
    [_storyId: BigNumberish, _chapterIndex: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "leaderboard"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint] & {
        user: string;
        points: bigint;
        winningVotes: bigint;
        storiesParticipated: bigint;
        referralCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "leaderboardCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "loreFragmentData"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        storyId: bigint;
        chapterId: bigint;
        choiceIndex: bigint;
        mintTimestamp: bigint;
        userPointsAtMint: bigint;
        rarity: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintLoreFragment"
  ): TypedContractMethod<
    [
      _recipient: AddressLike,
      _storyId: BigNumberish,
      _chapterId: BigNumberish,
      _tokenURI: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "pauseStory"
  ): TypedContractMethod<[_storyId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerUser"
  ): TypedContractMethod<[_referrer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveChapter"
  ): TypedContractMethod<
    [_storyId: BigNumberish, _chapterIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resolveProposal"
  ): TypedContractMethod<[_storyId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resumeStory"
  ): TypedContractMethod<[_storyId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stories"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        storyId: bigint;
        writer: string;
        title: string;
        summary: string;
        ipfsHashImage: string;
        status: bigint;
        createdAt: bigint;
        proposalVoteEndTime: bigint;
        proposalYesVotes: bigint;
        proposalNoVotes: bigint;
        currentChapterIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "storyCompletionBonusAvailable"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "storyIdToCurrentChapterIndex"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userOwnedFragments"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userProfiles"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, string, bigint, boolean, bigint] & {
        totalPoints: bigint;
        storiesParticipated: bigint;
        winningVotes: bigint;
        referrer: string;
        referralCount: bigint;
        isRegistered: boolean;
        registeredAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userVoteChoices"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "voteOnChapter"
  ): TypedContractMethod<
    [
      _storyId: BigNumberish,
      _chapterIndex: BigNumberish,
      _choiceIndex: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voteOnProposal"
  ): TypedContractMethod<
    [_storyId: BigNumberish, _voteType: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BatchMetadataUpdate"
  ): TypedContractEvent<
    BatchMetadataUpdateEvent.InputTuple,
    BatchMetadataUpdateEvent.OutputTuple,
    BatchMetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "ChapterAdded"
  ): TypedContractEvent<
    ChapterAddedEvent.InputTuple,
    ChapterAddedEvent.OutputTuple,
    ChapterAddedEvent.OutputObject
  >;
  getEvent(
    key: "ChapterResolved"
  ): TypedContractEvent<
    ChapterResolvedEvent.InputTuple,
    ChapterResolvedEvent.OutputTuple,
    ChapterResolvedEvent.OutputObject
  >;
  getEvent(
    key: "CollaboratorAdded"
  ): TypedContractEvent<
    CollaboratorAddedEvent.InputTuple,
    CollaboratorAddedEvent.OutputTuple,
    CollaboratorAddedEvent.OutputObject
  >;
  getEvent(
    key: "LeaderboardUpdated"
  ): TypedContractEvent<
    LeaderboardUpdatedEvent.InputTuple,
    LeaderboardUpdatedEvent.OutputTuple,
    LeaderboardUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LoreFragmentMinted"
  ): TypedContractEvent<
    LoreFragmentMintedEvent.InputTuple,
    LoreFragmentMintedEvent.OutputTuple,
    LoreFragmentMintedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdate"
  ): TypedContractEvent<
    MetadataUpdateEvent.InputTuple,
    MetadataUpdateEvent.OutputTuple,
    MetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PointsAwarded"
  ): TypedContractEvent<
    PointsAwardedEvent.InputTuple,
    PointsAwardedEvent.OutputTuple,
    PointsAwardedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalVoteCast"
  ): TypedContractEvent<
    ProposalVoteCastEvent.InputTuple,
    ProposalVoteCastEvent.OutputTuple,
    ProposalVoteCastEvent.OutputObject
  >;
  getEvent(
    key: "StoryApproved"
  ): TypedContractEvent<
    StoryApprovedEvent.InputTuple,
    StoryApprovedEvent.OutputTuple,
    StoryApprovedEvent.OutputObject
  >;
  getEvent(
    key: "StoryCompleted"
  ): TypedContractEvent<
    StoryCompletedEvent.InputTuple,
    StoryCompletedEvent.OutputTuple,
    StoryCompletedEvent.OutputObject
  >;
  getEvent(
    key: "StoryCompletionBonusAwarded"
  ): TypedContractEvent<
    StoryCompletionBonusAwardedEvent.InputTuple,
    StoryCompletionBonusAwardedEvent.OutputTuple,
    StoryCompletionBonusAwardedEvent.OutputObject
  >;
  getEvent(
    key: "StoryProposed"
  ): TypedContractEvent<
    StoryProposedEvent.InputTuple,
    StoryProposedEvent.OutputTuple,
    StoryProposedEvent.OutputObject
  >;
  getEvent(
    key: "StoryRejected"
  ): TypedContractEvent<
    StoryRejectedEvent.InputTuple,
    StoryRejectedEvent.OutputTuple,
    StoryRejectedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "UserRegistered"
  ): TypedContractEvent<
    UserRegisteredEvent.InputTuple,
    UserRegisteredEvent.OutputTuple,
    UserRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BatchMetadataUpdate(uint256,uint256)": TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;
    BatchMetadataUpdate: TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;

    "ChapterAdded(uint256,uint256,string,uint256)": TypedContractEvent<
      ChapterAddedEvent.InputTuple,
      ChapterAddedEvent.OutputTuple,
      ChapterAddedEvent.OutputObject
    >;
    ChapterAdded: TypedContractEvent<
      ChapterAddedEvent.InputTuple,
      ChapterAddedEvent.OutputTuple,
      ChapterAddedEvent.OutputObject
    >;

    "ChapterResolved(uint256,uint256,uint256,string)": TypedContractEvent<
      ChapterResolvedEvent.InputTuple,
      ChapterResolvedEvent.OutputTuple,
      ChapterResolvedEvent.OutputObject
    >;
    ChapterResolved: TypedContractEvent<
      ChapterResolvedEvent.InputTuple,
      ChapterResolvedEvent.OutputTuple,
      ChapterResolvedEvent.OutputObject
    >;

    "CollaboratorAdded(uint256,address)": TypedContractEvent<
      CollaboratorAddedEvent.InputTuple,
      CollaboratorAddedEvent.OutputTuple,
      CollaboratorAddedEvent.OutputObject
    >;
    CollaboratorAdded: TypedContractEvent<
      CollaboratorAddedEvent.InputTuple,
      CollaboratorAddedEvent.OutputTuple,
      CollaboratorAddedEvent.OutputObject
    >;

    "LeaderboardUpdated(address,uint256,uint256)": TypedContractEvent<
      LeaderboardUpdatedEvent.InputTuple,
      LeaderboardUpdatedEvent.OutputTuple,
      LeaderboardUpdatedEvent.OutputObject
    >;
    LeaderboardUpdated: TypedContractEvent<
      LeaderboardUpdatedEvent.InputTuple,
      LeaderboardUpdatedEvent.OutputTuple,
      LeaderboardUpdatedEvent.OutputObject
    >;

    "LoreFragmentMinted(address,uint256,uint256,uint256)": TypedContractEvent<
      LoreFragmentMintedEvent.InputTuple,
      LoreFragmentMintedEvent.OutputTuple,
      LoreFragmentMintedEvent.OutputObject
    >;
    LoreFragmentMinted: TypedContractEvent<
      LoreFragmentMintedEvent.InputTuple,
      LoreFragmentMintedEvent.OutputTuple,
      LoreFragmentMintedEvent.OutputObject
    >;

    "MetadataUpdate(uint256)": TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;
    MetadataUpdate: TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PointsAwarded(address,uint256,string)": TypedContractEvent<
      PointsAwardedEvent.InputTuple,
      PointsAwardedEvent.OutputTuple,
      PointsAwardedEvent.OutputObject
    >;
    PointsAwarded: TypedContractEvent<
      PointsAwardedEvent.InputTuple,
      PointsAwardedEvent.OutputTuple,
      PointsAwardedEvent.OutputObject
    >;

    "ProposalVoteCast(uint256,address,uint8)": TypedContractEvent<
      ProposalVoteCastEvent.InputTuple,
      ProposalVoteCastEvent.OutputTuple,
      ProposalVoteCastEvent.OutputObject
    >;
    ProposalVoteCast: TypedContractEvent<
      ProposalVoteCastEvent.InputTuple,
      ProposalVoteCastEvent.OutputTuple,
      ProposalVoteCastEvent.OutputObject
    >;

    "StoryApproved(uint256)": TypedContractEvent<
      StoryApprovedEvent.InputTuple,
      StoryApprovedEvent.OutputTuple,
      StoryApprovedEvent.OutputObject
    >;
    StoryApproved: TypedContractEvent<
      StoryApprovedEvent.InputTuple,
      StoryApprovedEvent.OutputTuple,
      StoryApprovedEvent.OutputObject
    >;

    "StoryCompleted(uint256,uint256,uint256)": TypedContractEvent<
      StoryCompletedEvent.InputTuple,
      StoryCompletedEvent.OutputTuple,
      StoryCompletedEvent.OutputObject
    >;
    StoryCompleted: TypedContractEvent<
      StoryCompletedEvent.InputTuple,
      StoryCompletedEvent.OutputTuple,
      StoryCompletedEvent.OutputObject
    >;

    "StoryCompletionBonusAwarded(address,uint256,uint256)": TypedContractEvent<
      StoryCompletionBonusAwardedEvent.InputTuple,
      StoryCompletionBonusAwardedEvent.OutputTuple,
      StoryCompletionBonusAwardedEvent.OutputObject
    >;
    StoryCompletionBonusAwarded: TypedContractEvent<
      StoryCompletionBonusAwardedEvent.InputTuple,
      StoryCompletionBonusAwardedEvent.OutputTuple,
      StoryCompletionBonusAwardedEvent.OutputObject
    >;

    "StoryProposed(uint256,address,string,string,string)": TypedContractEvent<
      StoryProposedEvent.InputTuple,
      StoryProposedEvent.OutputTuple,
      StoryProposedEvent.OutputObject
    >;
    StoryProposed: TypedContractEvent<
      StoryProposedEvent.InputTuple,
      StoryProposedEvent.OutputTuple,
      StoryProposedEvent.OutputObject
    >;

    "StoryRejected(uint256)": TypedContractEvent<
      StoryRejectedEvent.InputTuple,
      StoryRejectedEvent.OutputTuple,
      StoryRejectedEvent.OutputObject
    >;
    StoryRejected: TypedContractEvent<
      StoryRejectedEvent.InputTuple,
      StoryRejectedEvent.OutputTuple,
      StoryRejectedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "UserRegistered(address,address)": TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;
    UserRegistered: TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;

    "VoteCast(uint256,uint256,address,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
